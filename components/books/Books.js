import React, { useState, useEffect } from "react";
import * as XLSX from "xlsx";
import { Container, Title, BooksContainer } from "./BooksStyles";
import BookComponent from "../book/BookComponent";

const Books = () => {
  const [sheetData, setSheetData] = useState([]);
  const [searchQuery, setSearchQuery] = useState(""); // ุญุงูุฉ ุงูุจุญุซ
  const [sortOption, setSortOption] = useState(""); // ุญุงูุฉ ุงูุชุฑุชูุจ

  useEffect(() => {
    async function fetchSheetData() {
      try {
        const response = await fetch("static/Homebooks.xlsx"); // ุชุญููู ููู ุงูุฅูุณู
        const buffer = await response.arrayBuffer();
        const workbook = XLSX.read(buffer, { type: "buffer" });

        // ูุฑุงุกุฉ ุฃูู ูุฑูุฉ ูู ุงูููู
        const sheet = workbook.Sheets[workbook.SheetNames[0]];
        const jsonData = XLSX.utils.sheet_to_json(sheet, { header: 1 });

        setSheetData(jsonData);
      } catch (error) {
        console.error("Error reading Excel file:", error);
      }
    }

    fetchSheetData();
  }, []);

  // ุชุญุฏูุซ ุงูุจุญุซ
  const handleSearch = (event) => {
    setSearchQuery(event.target.value.toLowerCase());
  };

  // ุชุญุฏูุซ ุฎูุงุฑ ุงูุชุฑุชูุจ
  const handleSortChange = (event) => {
    setSortOption(event.target.value);
  };

  // ุชุตููุฉ ุงููุชุจ ุจูุงุกู ุนูู ุงูุจุญุซ
  const filteredBooks = sheetData.filter(
    (col) =>
      col[4] && // ุงูุชุฃูุฏ ูู ุฃู ุงุณู ุงููุชุงุจ ููุฌูุฏ
      (col[4].toLowerCase().includes(searchQuery) || // ุงูุจุญุซ ูู ุงุณู ุงููุชุงุจ
        (col[3] && col[3].toLowerCase().includes(searchQuery))) // ุงูุจุญุซ ูู ุงุณู ุงููุงุชุจ
  );

  // ุชุฑุชูุจ ุงููุชุจ ุจูุงุกู ุนูู ุงูุฎูุงุฑ ุงููุญุฏุฏ
  const sortedBooks = [...filteredBooks].sort((a, b) => {
    if (sortOption === "title-asc") return a[4].localeCompare(b[4]); // ุงุณู ุงููุชุงุจ ุชุตุงุนุฏู
    if (sortOption === "title-desc") return b[4].localeCompare(a[4]); // ุงุณู ุงููุชุงุจ ุชูุงุฒูู
    if (sortOption === "author-asc") return a[3]?.localeCompare(b[3]) || 0; // ุงุณู ุงููุงุชุจ ุชุตุงุนุฏู
    if (sortOption === "author-desc") return b[3]?.localeCompare(a[3]) || 0; // ุงุณู ุงููุงุชุจ ุชูุงุฒูู
    if (sortOption === "pages-asc") return (a[2] || 0) - (b[2] || 0); // ุนุฏุฏ ุงูุตูุญุงุช ุชุตุงุนุฏู
    if (sortOption === "pages-desc") return (b[2] || 0) - (a[2] || 0); // ุนุฏุฏ ุงูุตูุญุงุช ุชูุงุฒูู
    return 0;
  });

  return (
    <Container>
      <Title>๐ ุฃูููุง ุจูู ูู ููุชุจุชูุง ๐ </Title>

      {/* ูุฑุจุน ุงูุจุญุซ */}
      <input
        type="text"
        placeholder="ุงุจุญุซ ุนู ุงุณู ุงููุชุงุจ ุฃู ุงููุงุชุจ..."
        value={searchQuery}
        onChange={handleSearch}
        style={{
          padding: "10px",
          margin: "20px",
          borderRadius: "5px",
          border: "1px solid #ccc",
        }}
      />

      {/* ูุงุฆูุฉ ุงูุชุฑุชูุจ */}
      <select
        value={sortOption}
        onChange={handleSortChange}
        style={{
          margin: "20px",
          borderRadius: "5px",
          width: "40%",
          marginLeft: "55%",
        }}
      >
        <option value="">ุชุฑุชูุจ ุญุณุจ...</option>
        <option value="title-asc">ุงุณู ุงููุชุงุจ (ุฃ-ู)</option>
        <option value="title-desc">ุงุณู ุงููุชุงุจ (ู-ุฃ)</option>
        <option value="author-asc">ุงุณู ุงููุงุชุจ (ุฃ-ู)</option>
        <option value="author-desc">ุงุณู ุงููุงุชุจ (ู-ุฃ)</option>
        <option value="pages-asc">ุนุฏุฏ ุงูุตูุญุงุช ุชุตุงุนุฏู</option>
        <option value="pages-desc">ุนุฏุฏ ุงูุตูุญุงุช ุชูุงุฒูู</option>
      </select>

      <BooksContainer>
        {sortedBooks.map(
          (col, index) =>
            col[4] && (
              <BookComponent
                title={col[4]}
                author={col[3]}
                pages={col[2]}
                shelf={col[5]}
                image={col[6]}
                key={index}
              />
            )
        )}
      </BooksContainer>
    </Container>
  );
};

export default Books;
